#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <stdlib.h>
#include "Sprite.h"
#include "Player.h"
#include "Dot.h"
#include "Tile.h"
#include "Ghost.h"

#define FG_COUNT 5
#define DG_COUNT 754
#define MAP_WIDTH 28
#define MAP_HEIGHT 31

unsigned int path_data[MAP_WIDTH * MAP_HEIGHT] = {
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,
  0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,
  0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,
  0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,
  0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
  0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,
  0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,
  0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,
  0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,
  0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,
  0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,
  0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,
  0,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0,
  1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,
  0,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0,
  0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,
  0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,
  0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,
  0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,
  0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,
  0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,
  0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,
  0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,
  0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,
  0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,
  0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,
  0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,
  0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};

unsigned int map[MAP_WIDTH*MAP_HEIGHT] = {
  33,10,10,10,10,10,10,10,10,10,10,10,10,60,70,10,10,10,10,10,10,10,10,10,10,10,10,30,
    13,00,00,00,00,00,00,00,00,00,00,00,00,23,21,00,00,00,00,00,00,00,00,00,00,00,00,11,
    13,00,53,20,20,50,00,53,20,20,20,50,00,23,21,00,53,20,20,20,50,00,53,20,20,50,00,11,
    13,00,23,00,00,21,00,23,00,00,00,21,00,23,21,00,21,00,00,00,23,00,23,00,00,21,00,11,
    13,00,52,22,22,51,00,52,22,22,22,51,00,52,51,00,52,22,22,22,51,00,52,22,22,51,00,11,
    13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    13,00,53,20,20,50,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,53,20,20,50,00,11,
    13,00,52,22,22,51,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,52,22,22,51,00,11,
    13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    32,12,12,12,12,50,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    00,00,00,00,00,13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    00,00,00,00,00,13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    00,00,00,00,00,13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    10,10,10,10,10,51,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    12,12,12,12,12,50,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    00,00,00,00,00,13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    00,00,00,00,00,13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    00,00,00,00,00,13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    33,10,10,10,10,51,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    13,00,53,20,20,50,00,53,20,20,20,50,00,00,00,00,53,20,20,20,50,00,53,20,20,50,00,11,
    13,00,52,22,40,21,00,52,22,22,22,51,00,00,00,00,52,22,22,22,51,00,23,43,22,51,00,11,
    13,00,00,00,23,21,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,23,21,00,00,00,11,
    62,20,50,00,23,21,00,53,50,00,00,00,00,00,00,00,00,00,00,53,50,00,23,21,00,00,00,11,
    63,22,51,00,52,51,00,23,21,00,00,00,00,00,00,00,00,00,00,23,21,00,52,51,00,00,00,11,
    13,00,00,00,00,00,00,23,21,00,00,00,00,00,00,00,00,00,00,23,21,00,00,00,00,00,00,11,
    13,00,53,20,20,20,20,41,42,20,20,50,00,00,00,00,53,20,20,41,42,20,20,20,20,50,00,11,
    13,00,52,22,22,22,22,22,22,22,22,51,00,00,00,00,52,22,22,22,22,22,22,22,22,51,00,11,
    13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,
    32,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,31,
};

int main() {

  float x, y;

  LCD.Clear(FEHLCD::Black);
  LCD.SetFontColor(FEHLCD::White);
  LCD.SetOrientation(FEHLCD::East);

  enum Direction dir = East; // Player Direction

  Collider paths(path_data, 8, MAP_WIDTH, MAP_HEIGHT);

  bool big = false;
  Dot dot;
  Tile tile;

  Player player(&paths, 5, 0);
  Ghost ghosts[1];
  
  // TODO : Give Real Positions on Grid
  ghosts[0] = Ghost(&paths, &player, 0, 56, 56);
  /*ghosts[1] = Ghost(&paths, &player, 0, 32, 16);
  ghosts[2] = Ghost(&paths, &player, 0, 16, 32);
  ghosts[3] = Ghost(&paths, &player, 0, 32, 32);*/

  unsigned long long frame = 0;

  while (!LCD.Touch(&x, &y));

  for (int x = 0; x < MAP_WIDTH; x++) {
    for (int y = 0; y < MAP_HEIGHT; y++) {
      unsigned int block = map[y*MAP_WIDTH + x];
      TileType type = TileType(block / 10 % 10);
      Rotation rot;
      unsigned int rotate = block % 10;
      switch (rotate) {
        case 0:
          rot = Deg0;
          break;
        case 1:
          rot = Deg90;
          break;
        case 2:
          rot = Deg180;
          break;
        case 3:
          rot = Deg270;
          break;
        default:
          rot = Deg0;
      }
      tile = Tile(x*8, y*8, type, rot);
      tile.render();
    }
  }

  for (int x = 0; x < MAP_WIDTH; x++) {
    for (int y = 0; y < MAP_HEIGHT; y++) {
      if (path_data[y*MAP_WIDTH + x] == 1) {
        dot = Dot(x*8, y*8, big);
        dot.render();
      }
    }
  }

  while (true) {

    // Choose Direction for Player
    if (LCD.Touch(&x, &y))
    {
      if (y < 90)
      {
        dir = West;
      }
      else if (y > 160)
      {
        dir = East;
      }
      else if (x < 100)
      {
        dir = South;
      }
      else if (x > 200)
      {
        dir = North;
      }
    }

    /*for (int i = 0; i < MAP_WIDTH*MAP_HEIGHT; i++) {
      ments[i].render();
    }*/

    // Move Entities
    player.move(dir);
    player.update(frame);
    player.render();

    for (int i = 0; i < 1; i++) {
      ghosts[i].move();
      ghosts[i].update(frame);
      ghosts[i].render();
    }

    frame++;
    Sleep(15);
  }
  return 0;
}